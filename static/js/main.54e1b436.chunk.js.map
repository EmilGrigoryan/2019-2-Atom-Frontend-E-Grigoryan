{"version":3,"sources":["styles/DialogObject.module.css","styles/Dialogs.module.css","styles/Profile.module.css","styles/Header.module.css","styles/MessageForm.module.css","styles/Message.module.css","styles/HeaderChat.module.css","styles/FormInput.module.css","components/Initialization.js","styles/ChatStyle.module.css","utils/serviceWorker.js","components/HeaderChat.jsx","components/DialogObject.jsx","components/Header.jsx","components/FormInput.jsx","components/Message.jsx","components/MessageForm.jsx","components/Profile.jsx","components/Dialogs.jsx","index.jsx","components/Chat.jsx"],"names":["module","exports","localStorage","getItem","setItem","JSON","stringify","name","time","data","userName","about","Boolean","window","location","hostname","match","HeaderChat","props","className","styles","wrap","burger","search","DialogObject","to","style","textDecoration","color","avatar","chat_id","InformationBlock","PersonalInformation","chat","lastmessage","AdditionalInformation","status","Header","backbutton","online","FormInput","state","value","event","preventDefault","this","handleSubmit","setState","target","pin","onSubmit","bind","width","type","placeholder","onChange","handleChange","outline","React","Component","MessageOne","messageOne","newmessage","MessageForm","dialogId","id","messages","messagesRender","Date","getHours","getMinutes","length","timeMes","getTimeStr","key","push","now","Math","random","messageObj","messageBuf","parse","forEach","item","dialogueItem","header","dialog","formInput","Profile","profile","container","Dialogs","dialogID","openMessages","MessageFormAppear","animationName","ProfileAppear","openChat","closeChat","appear","buffer","disappear","console","log","dialogs","messageArray","path","pathname","test","chatId","parseInt","openProfile","closeProfile","funcRouter","dialogBuffer","dialogLoad","buttonNew","render","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54e1b436.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"DialogObject_wrap__2IHCg\",\"avatar\":\"DialogObject_avatar__1QCS5\",\"InformationBlock\":\"DialogObject_InformationBlock__2quxw\",\"PersonalInformation\":\"DialogObject_PersonalInformation__1eEN-\",\"AdditionalInformation\":\"DialogObject_AdditionalInformation__3XWTw\",\"name\":\"DialogObject_name__29fIM\",\"lastmessage\":\"DialogObject_lastmessage__12ySH\",\"time\":\"DialogObject_time__OZjkR\",\"status\":\"DialogObject_status__18FAO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Dialogs_wrap__3V94j\",\"header\":\"Dialogs_header__3LN0U\",\"dialogs\":\"Dialogs_dialogs__3cDrq\",\"buttonNew\":\"Dialogs_buttonNew__2_d3B\",\"forButton\":\"Dialogs_forButton__XphLy\",\"appear\":\"Dialogs_appear__38h-K\",\"disappear\":\"Dialogs_disappear__3oQXo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Profile_wrap__25qw-\",\"header\":\"Profile_header__3KTnW\",\"profile\":\"Profile_profile__3y5_H\",\"avatar\":\"Profile_avatar__3XqJk\",\"container\":\"Profile_container__2JtNm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Header_wrap__1jQCG\",\"data\":\"Header_data__2EmoH\",\"backbutton\":\"Header_backbutton__3VCAQ\",\"search\":\"Header_search__n-3vn\",\"name\":\"Header_name__sBWfK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"MessageForm_wrap__13dsb\",\"formInput\":\"MessageForm_formInput__1UaVl\",\"dialog\":\"MessageForm_dialog__ZBXAu\",\"messages\":\"MessageForm_messages__3miM1\",\"header\":\"MessageForm_header__10-FU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageOne\":\"Message_messageOne__3tj5g\",\"data\":\"Message_data__2ByTC\",\"time\":\"Message_time__35Zfq\",\"userName\":\"Message_userName__1Qvk6\",\"newBox\":\"Message_newBox__3sqbJ\",\"messageBoxApearence\":\"Message_messageBoxApearence__VAurz\",\"newmessage\":\"Message_newmessage__28GsG\",\"newmessageOp\":\"Message_newmessageOp__3criL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"HeaderChat_wrap__xhr7e\",\"burger\":\"HeaderChat_burger__2ixQp\",\"data\":\"HeaderChat_data__1JLUe\",\"search\":\"HeaderChat_search__72z3G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"FormInput_wrap__1lbFG\",\"inputText\":\"FormInput_inputText__hxKAE\",\"pin\":\"FormInput_pin__1SkJq\"};","// localStorage.clear()\nif (localStorage.getItem('DialogIDs') === null) {\n  localStorage.setItem('DialogIDs', JSON.stringify([0, 1]))\n  localStorage.setItem(\n    'DialogId_0',\n    JSON.stringify([\n      { name: 'Дженнифер Эшли', time: '0:41', data: 'Сообщение от Джен' },\n      [{ name: 'Дженнифер Эшли', data: 'Сообщение от Джен', time: '0:41' }],\n    ]),\n  )\n\n  localStorage.setItem(\n    'DialogId_1',\n    JSON.stringify([\n      { name: 'Эмиль Григорян', time: '0:58', data: 'Сообщение от Emil' },\n      [{ name: 'Эмиль Григорян', data: 'Сообщение от Emil', time: '0:58' }],\n    ]),\n  )\n\n  localStorage.setItem(\n    'Users',\n    JSON.stringify({\n      'Эмиль Григорян': { userName: 'emil__grig', about: 'Разработчик приложения' },\n      'Дженнифер Эшли': { userName: 'DAshley', about: 'Выдуманный персонаж' },\n    }),\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"ChatStyle_wrap__1bLxI\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n/* eslint no-console: 0 */\n/* eslint no-param-reassign: 0 */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\n\nimport styles from '../styles/HeaderChat.module.css'\n\nexport function HeaderChat(props) {\n  return (\n    <div className={styles.wrap}>\n      <div className={styles.burger}></div>\n      <div className={styles.data}>Chat</div>\n      <div className={styles.search}></div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styles from '../styles/DialogObject.module.css'\n\nexport function DialogObject(props) {\n  return (\n    <div className={styles.wrap}>\n      <Link to={`/profile/`} style={{ textDecoration: 'none', color: 'unset' }}>\n        <div className={styles.avatar}></div>\n      </Link>\n      <Link\n        to={`/chat/${props.chat_id}`}\n        className={styles.InformationBlock}\n        style={{ textDecoration: 'none', color: 'unset' }}\n      >\n        <div className={styles.PersonalInformation}>\n          <div className={styles.name}>\n            <p>{props.chat.name}</p>\n          </div>\n          <div className={styles.lastmessage}>\n            <p>{props.chat.data}</p>\n          </div>\n        </div>\n        <div className={styles.AdditionalInformation}>\n          <div className={styles.time}>\n            <p>{props.chat.time}</p>\n          </div>\n          <div className={styles.status}></div>\n        </div>\n      </Link>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport styles from '../styles/Header.module.css'\n\nexport function Header(props) {\n  return (\n    <div className={styles.wrap}>\n      <Link to=\"/\">\n        <div className={styles.backbutton}></div>\n      </Link>\n      <div className={styles.data}>\n        <Link to={`/profile/`} style={{ textDecoration: 'none', color: 'unset' }}>\n          <div className={styles.name}> {props.name} </div>\n        </Link>\n        <div className={styles.online}>{props.status}</div>\n      </div>\n      <div className={styles.search}></div>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport styles from '../styles/FormInput.module.css'\n\nexport class FormInput extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: '',\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n    this.props.handleSubmit(this.state.value)\n    this.setState({ value: '' })\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value })\n  }\n\n  render() {\n    return (\n      <div className={styles.wrap}>\n        <div className={styles.pin}></div>\n        <form onSubmit={this.handleSubmit.bind(this)} style={{ width: '100%' }}>\n          <input\n            type=\"text\"\n            value={this.state.value}\n            placeholder=\"Write a message..\"\n            onChange={this.handleChange.bind(this)}\n            style={{ outline: 'none' }}\n          />\n        </form>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport styles from '../styles/Message.module.css'\n\nexport function MessageOne(props) {\n  return (\n    <div className={`${styles.messageOne} ${styles.newmessage}`}>\n      <div className={styles.userName}>EG</div>\n      <div className={styles.time}>{props.time}</div>\n      <div className={styles.data}>{props.data}</div>\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from '../styles/MessageForm.module.css'\nimport { Header } from './Header'\nimport { FormInput } from './FormInput'\nimport { MessageOne } from './Message'\n\nexport class MessageForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      dialogId: this.props.id,\n      messages: this.messagesRender(),\n    }\n  }\n\n  getTimeStr() {\n    const time = new Date()\n    return `${time.getHours()}:${time.getMinutes()}`\n  }\n\n  handleSubmit(value) {\n    const { state } = this\n    if (value.length > 0) {\n      const timeMes = this.getTimeStr()\n      const key = `DialogId_${this.state.dialogId}`\n      state.messages.push(<MessageOne key={Date.now() + Math.random()} data={value} time={timeMes} />)\n      const messageObj = {\n        name: 'EG',\n        data: value,\n        time: timeMes,\n      }\n      const messageBuf = JSON.parse(localStorage.getItem(key))\n      messageBuf[0].data = value\n      messageBuf[0].time = timeMes\n      messageBuf[1].push(messageObj)\n      localStorage.setItem(key, JSON.stringify(messageBuf))\n    }\n    this.setState(state)\n  }\n\n  messagesRender() {\n    const messageOne = []\n    if (this.props.id !== null) {\n      const messages = this.props.messages\n      messages.forEach((item) => {\n        const dialogueItem = <MessageOne data={item.data} time={item.time} key={Date.now() + Math.random()} />\n        messageOne.push(dialogueItem)\n      })\n    }\n    return messageOne\n  }\n\n  render() {\n    return (\n      <div style={this.props.style} className={styles.wrap}>\n        <div className={styles.header}>\n          <Header name={this.props.name} status={'last seen recently'} />\n        </div>\n        <div className={styles.dialog}>\n          <div className={styles.messages}>{this.state.messages}</div>\n        </div>\n        <div className={styles.formInput}>\n          <FormInput handleSubmit={this.handleSubmit.bind(this)} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport styles from '../styles/Profile.module.css'\nimport { Header } from './Header'\n\nexport function Profile(props) {\n  const { style } = props\n  return (\n    <div className={styles.wrap} style={style}>\n      <div className={styles.header}>\n        <Header />\n      </div>\n      <div className={styles.profile}>\n        <div className={styles.avatar} />\n        <div className={styles.container}>\n          <p>Full name</p>\n          <p>Emil</p>\n        </div>\n        <div className={styles.container}>\n          <p>Username:</p>\n          <p>emil__grig</p>\n        </div>\n        <div className={styles.container}>\n          <p>About:</p>\n          <p>Разработчик приложения</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport styles from '../styles/Dialogs.module.css'\n\nimport { HeaderChat } from './HeaderChat'\nimport { DialogObject } from './DialogObject'\nimport { MessageForm } from './MessageForm'\nimport { Profile } from './Profile'\n\nexport class Dialogs extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      dialogID: null,\n      openMessages: null,\n      name: '',\n      MessageFormAppear: {\n        animationName: null,\n      },\n      ProfileAppear: {\n        animationName: null,\n      },\n    }\n    this.openChat = this.openChat.bind(this)\n    this.closeChat = this.closeChat.bind(this)\n  }\n\n  openChat(dialogId) {\n    const { state } = this\n    state.MessageFormAppear = {\n      animationName: styles.appear,\n    }\n    const buffer = JSON.parse(localStorage.getItem(`DialogId_${dialogId}`))\n    state.openMessages = buffer[1]\n    state.dialogID = dialogId\n    state.name = buffer[0].name\n  }\n\n  closeChat() {\n    const { state } = this\n    state.MessageFormAppear = {\n      animationName: styles.disappear,\n    }\n    console.log('state.MessageFormAppear')\n  }\n\n  openProfile() {\n    const { state } = this\n    state.ProfileAppear = {\n      animationName: styles.appear,\n    }\n    console.log(state.ProfileAppear)\n  }\n\n  closeProfile() {\n    const { state } = this\n    state.ProfileAppear = {\n      animationName: styles.disappear,\n    }\n  }\n\n  dialogLoad() {\n    let dialogs = []\n    const messageArray = JSON.parse(localStorage.getItem('DialogIDs'))\n    if (messageArray) {\n      messageArray.forEach((item) => {\n        const chat = JSON.parse(localStorage.getItem(`DialogId_${item}`))\n        const dialogueItem = (\n          <DialogObject\n            id={item}\n            chat_id={item}\n            chat={chat[0]}\n            key={Date.now() + Math.random()}\n            openChat={this.openChat}\n          />\n        )\n        dialogs.push(dialogueItem)\n      })\n      return dialogs\n    }\n    localStorage.setItem('DialogIDs', JSON.stringify([]))\n    return []\n  }\n\n  funcRouter() {\n    const path = this.props.location.pathname\n    switch (true) {\n      case /chat\\/\\d\\/?$/.test(path):\n        const chatId = parseInt(path.match(/\\d+/), 10)\n        this.openChat(chatId)\n        break\n      case /profile/.test(path):\n        this.openProfile()\n        break\n      default:\n        this.closeChat()\n        this.closeProfile()\n        break\n    }\n  }\n\n  render() {\n    this.funcRouter()\n    const dialogBuffer = this.dialogLoad()\n    return (\n      <div className={styles.wrap}>\n        <div className={styles.header}>\n          <HeaderChat />\n        </div>\n        <div className={styles.dialogs}>{dialogBuffer}</div>\n        <div className={styles.buttonNew}></div>\n        <MessageForm\n          style={this.state.MessageFormAppear}\n          key={Date.now() + Math.random()}\n          messages={this.state.openMessages}\n          closeChat={this.closeChat}\n          id={this.state.dialogID}\n          name={this.state.name}\n        />\n        <Profile style={this.state.ProfileAppear} />\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport './components/Initialization'\nimport './styles/globalStyles.css'\nimport * as serviceWorker from './utils/serviceWorker'\nimport { ChatForm } from './components/Chat'\nrender(<ChatForm />, document.getElementById('root'))\nserviceWorker.unregister()\n","import React from 'react'\nimport './Initialization'\nimport { Dialogs } from './Dialogs'\nimport styles from '../styles/ChatStyle.module.css'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nexport function ChatForm() {\n  return (\n    <Router>\n      <div className={styles.wrap}>\n        <Route path=\"/\" component={Dialogs} />\n      </div>\n    </Router>\n  )\n}\n"],"sourceRoot":""}